#include <SPI.h>
#include <mcp_can.h>

// Define the pins used for the CAN module
const int SPI_CS_PIN = 10;
// Initialize MCP2515 object with CS pin
MCP_CAN CAN(SPI_CS_PIN);

// Function to send AT command
String sendAT() {
    Serial1.println("AT");
    
    while (!Serial1.available()) {
        // Wait for data to be available
    }
    
    String response = "";
    while (Serial1.available()) {
        char c = Serial1.read();
        response += c;    
        delay(100);
    }
    return response;
}

// Function to send custom command to 4G module
String sendCommand(String COMMAND) {
    Serial1.println(COMMAND.c_str());
    
    while (!Serial1.available()) {
        // Wait for data to be available
    }
    
    String response = "";
    while (Serial1.available()) {
        char c = Serial1.read();
        response += c;    
        delay(100);
    }
    return response;
}

void setup() {
    Serial.begin(9600);
    while (!Serial) {
        ; // wait for serial port to connect. Needed for native USB
    }

    // Initialize Serial1 for communication with 4G module
    Serial1.begin(115200);
    while (!Serial1) {
        ; // wait for serial port to connect. Needed for native USB
    }

    // Initialize MCP2515
    if (CAN.begin(MCP_ANY, CAN_500KBPS, MCP_16MHZ) == CAN_OK) {
        Serial.println("MCP2515 Initialization OK!");
    } else {
        Serial.println("MCP2515 Initialization Failed!");
    }
    
    pinMode(2, INPUT);  // Pin INT as input (optional)

    // Check if 4G module is up
    Serial.println("Testing 4G module with AT command, Module responded with:\n" + sendAT());

    // Check if MCP2515 is still alive
    if (CAN.checkError() == CAN_OK) {
        Serial.println("MCP2515 is online.");
    } else {
        Serial.println("MCP2515 is offline. Check connections!");
    }

    Serial.println("Sending command AT+CSQ:\n" + sendCommand("AT+CSQ"));
}

void loop() {
    // Check if there are new CAN messages available
    if (CAN_MSGAVAIL == CAN.checkReceive()) {
        long unsigned int rxId;
        unsigned char len = 0;
        unsigned char rxBuf[8];
        
        // Read CAN message
        CAN.readMsgBuf(&rxId, &len, rxBuf);
        
        // Display ID and data
        Serial.print("ID: ");
        Serial.println(rxId, HEX);
        
        for (int i = 0; i < len; i++) {
            Serial.print("Data ");
            Serial.print(i);
            Serial.print(": ");
            Serial.println(rxBuf[i], HEX);
        }

        int someVariable = rxBuf[0];

        String postData = "{\"id\":";
        postData += rxId;
        postData += ", \"data\":";
        postData += someVariable;
        postData += "}";

        Serial.println("Sending CAN data to the server: " + postData);
        Serial.println("Server response: " + sendCommand("AT+HTTPDATA=" + postData));
    }

    String userInput = "";
    Serial.println("Enter your input:");
    while (Serial.available() == 0) {
        // Wait for user input
    }
    while (Serial.available()) {
        char c = Serial.read();
        userInput += c;
        delay(100);
    }

    Serial.print("You entered: ");
    Serial.println(userInput);  
    Serial.println("Sending command: " + userInput + sendCommand(userInput));
}
